{"version":3,"sources":["components/AlphabeticTable/styles.js","components/AlphabeticTable/AlphabeticTable.jsx","components/AlphabeticTableHead/styles.js","components/AlphabeticTableHead/AlphabeticTableHead.jsx","components/AlphabeticTableHeading/styles.js","components/AlphabeticTableHeading/AlphabeticTableHeading.jsx","components/AlphabeticTableBody/style.js","components/AlphabeticTableBody/AlphabeticTableBody.jsx","components/AlphabeticTableSection/styles.js","components/AlphabeticTableSection/AlphabeticalTableSection.jsx","shapes/employee.js","components/AlphabeticEmployeeSwitcher/styles.js","components/AlphabeticEmployeeSwitcher/AlphabeticEmployeeSwitcher.jsx","components/AlphabeticEmployeeItem/styles.js","components/AlphabeticEmployeeItem/AlphabeticEmployeeItem.jsx","constants/letters.js","constants/date.js","shapes/alphabeticEmployees.js","components/AlphabeticEmployeeList/styles.js","components/AlphabeticEmployeeList/AlphabeticEmployeeList.jsx","components/AlphabeticEmployeeBirthdayItem/styles.js","helpers/employee.js","constants/sort.js","components/AlphabeticEmployeeBirthdayItem/AlphabeticEmployeeBirthdayItem.jsx","shapes/employeesByMonth.js","components/AlphabeticEmployeeBirthdayList/styles.js","components/AlphabeticEmployeeBirthdayList/AlphabeticEmployeeBirthdayList.jsx","redux/selectors/employee.js","pages/Employees.jsx"],"names":["useStyles","createUseStyles","root","width","employeeSection","AlphabeticTable","children","classes","className","memo","inner","AlphabeticTableHead","fontSize","AlphabeticTableHeading","textAlign","AlphabeticTableBody","verticalAlign","AlphabeticTableSection","props","clsx","shape","PropTypes","id","string","firstName","lastName","dob","border","padding","margin","minWidth","display","flexDirection","marginTop","legend","float","fontWeight","clear","legendActive","color","label","height","cursor","borderRadius","labelText","marginLeft","inputWrapper","alignItems","input","backgroundColor","boxShadow","AlphabeticEmployeeSwitcher","employee","dispatch","useDispatch","useState","isActive","setIsActive","activate","selectEmployee","deactivate","unselectEmployee","handleActivateClick","handleDeactivateClick","handleKeyDown","event","cb","keyCode","preventDefault","prev","type","checked","onChange","tabIndex","role","aria-checked","onKeyDown","htmlFor","onClick","title","switchers","AlphabeticEmployeeItem","letter","employees","employeeSwitchers","map","length","LETTERS","Array","from","MONTHS","lettersEmployeesEntries","l","arrayOf","employeeShape","Object","fromEntries","gridTemplateColumns","gridGap","listStyle","AlphabeticEmployeeList","alphabeticEmployees","items","useMemo","entries","lEmployees","month","dobList","dobItem","lastNamePredicate","a","b","toUpperCase","getEmployeesAlphaMap","sortedEmployees","sort","lettersMap","createLettersMap","push","datePattern","getMonthName","monthNumber","parseDateOfBirth","match","groups","AlphabeticEmployeeBirthdayItem","bDay","day","bMonth","bYear","year","name","Number","monthsShapeEntries","monthsShapeMap","AlphabeticEmployeeBirthdayList","employeesByMonth","employeesSelector","state","alphabeticEmployeesSelector","createSelector","selectedEmployeesSelector","selectedEmployeesIds","filter","includes","groupedByMonthEmployeesSelector","selectedEmployees","monthEmployeesBirthdaysMap","getEmployeesMonthsMap","alphaSection","birthdaySection","borderLeft","Employees","useSelector","groupedByMonthEmployees","useEffect","fetchEmployees"],"mappings":"uIAWeA,EATGC,YAAgB,CAChCC,KAAM,CACJC,MAAO,QAETC,gBAAiB,CACfD,MAAO,U,OCFLE,EAAkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnBC,EAAUP,IAEhB,OAAO,uBAAOQ,UAAWD,EAAQL,KAA1B,SAAiCI,KAO3BG,iBAAKJ,GCRLL,EALGC,YAAgB,CAChCC,KAAM,GACNQ,MAAO,KCCHC,EAAsB,SAAC,GAAkB,IAAhBL,EAAe,EAAfA,SACvBC,EAAUP,IAEhB,OACE,uBAAOQ,UAAWD,EAAQL,KAA1B,SACE,oBAAIM,UAAWD,EAAQG,MAAvB,SAA+BJ,OAStBG,iBAAKE,GCXLX,EANGC,YAAgB,CAChCC,KAAM,CACJU,SAAU,MCCRC,EAAyB,SAAC,GAAkB,IAAhBP,EAAe,EAAfA,SAC1BC,EAAUP,IAEhB,OAAO,oBAAIQ,UAAWD,EAAQL,KAAvB,SAA8BI,KAOxBG,iBAAKI,GCPLb,EANGC,YAAgB,CAChCC,KAAM,CACJY,UAAW,UCCTC,EAAsB,SAAC,GAAkB,IAAhBT,EAAe,EAAfA,SACvBC,EAAUP,IAEhB,OACE,uBAAOQ,UAAWD,EAAQL,KAA1B,SACE,6BAAKI,OASIG,iBAAKM,G,wBCXLf,EANGC,YAAgB,CAChCC,KAAM,CACJc,cAAe,S,2BCEbC,EAAyB,SAAC,GAA4C,IAAD,IAAzCT,iBAAyC,MAA7B,GAA6B,EAAzBF,EAAyB,EAAzBA,SAAaY,EAAY,iBACnEX,EAAUP,IAEhB,OACE,4CAAIQ,UAAWW,YAAKZ,EAAQL,KAAMM,IAAgBU,GAAlD,aACGZ,MAUQG,iBAAKQ,G,yCCZLG,EAPDC,IAAUD,MAAM,CAC5BE,GAAID,IAAUE,OACdC,UAAWH,IAAUE,OACrBE,SAAUJ,IAAUE,OACpBG,IAAKL,IAAUE,SCgDFvB,EApDGC,YAAgB,CAChCC,KAAM,CACJyB,OAAQ,EACRC,QAAS,EACTC,OAAQ,EACRC,SAAU,EACVC,QAAS,OACTC,cAAe,SACf,QAAS,CACPC,UAAW,KAGfC,OAAQ,CACNH,QAAS,QACTI,MAAO,OACPN,OAAQ,EACRD,QAAS,EACTQ,WAAY,IACZjC,MAAO,OACP,QAAS,CACPkC,MAAO,SAGXC,aAAc,CACZC,MAAO,QAETC,MAAO,CACLrC,MAAO,MACPsC,OAAQ,MACRV,QAAS,eACTW,OAAQ,UACRf,OAAQ,YACRgB,aAAc,OAEhBC,UAAW,CACTC,WAAY,GAEdC,aAAc,CACZf,QAAS,cACTgB,WAAY,SACZd,UAAW,GACXS,OAAQ,WAEVM,MAAO,CACLjB,QAAS,OACT,oBAAqB,CACnBkB,gBAAiB,UACjBC,UAAW,8BC+DFC,EApGoB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC9B7C,EAAUP,IACVqD,EAAWC,cACjB,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAW,WACfL,EAASM,YAAe,CAAErC,GAAI8B,EAAS9B,OAGnCsC,EAAa,WACjBP,EAASQ,YAAiB,CAAEvC,GAAI8B,EAAS9B,OAGrCwC,EAAsB,WAC1BJ,IACAD,GAAY,IAGRM,EAAwB,WAC5BH,IACAH,GAAY,IAGRO,EAAgB,SAACC,EAAOC,GAzBT,KA0BfD,EAAME,UACRF,EAAMG,iBACNF,IACAT,GAAY,SAACY,GAAD,OAAWA,OAY3B,OACE,2BAAU7D,UAAWD,EAAQL,KAA7B,UACE,yBACEM,UAAWW,YAAKZ,EAAQ2B,OAAT,eAAoB3B,EAAQ+B,aAAekB,IAD5D,UAGGJ,EAAS5B,UAHZ,IAGwB4B,EAAS3B,YAGjC,sBAAKjB,UAAWD,EAAQuC,aAAxB,UACE,uBACEwB,KAAK,QACLC,QAASf,EACThD,UAAWD,EAAQyC,MACnBwB,SAAUV,EACVxC,GAAE,UAAK8B,EAAS9B,GAAd,eAGJ,uBACEmD,SAAS,IACTC,KAAK,QACLC,eAAcnB,EACdhD,UAAWD,EAAQiC,MACnBoC,UA9BsB,SAACX,GAC7BD,EAAcC,EAAOP,IA8BfmB,QAAO,UAAKzB,EAAS9B,GAAd,eAGT,sBAAMd,UAAWD,EAAQqC,UAAWkC,QAAShB,EAA7C,uBAKF,sBAAKtD,UAAWD,EAAQuC,aAAxB,UACE,uBACEwB,KAAK,QACLC,SAAUf,EACVhD,UAAWD,EAAQyC,MACnB1B,GAAE,UAAK8B,EAAS9B,GAAd,eACFkD,SAAUT,IAGZ,uBACEU,SAAS,IACTC,KAAK,QACLC,gBAAenB,EACfhD,UAAWD,EAAQiC,MACnBoC,UAjDwB,SAACX,GAC/BD,EAAcC,EAAOL,IAiDfiB,QAAO,UAAKzB,EAAS9B,GAAd,iBAGT,sBAAMd,UAAWD,EAAQqC,UAAWkC,QAASf,EAA7C,+BCxFO/D,EAVGC,YAAgB,CAChCC,KAAM,GACN6E,MAAO,CACLnD,QAAS,SACThB,SAAU,GACViB,OAAQ,UAEVmD,UAAW,KCsBEC,EAtBgB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,OAA6B,IAArBC,iBAAqB,MAAT,GAAS,EACvD5E,EAAUP,IACVoF,EAAoBD,EAAUE,KAAI,SAACjC,GAAD,OACtC,cAAC,EAAD,CAA8CA,SAAUA,GAAvBA,EAAS9B,OAG5C,OACE,qBAAId,UAAWD,EAAQL,KAAvB,UACE,oBAAIM,UAAWD,EAAQwE,MAAvB,SAA+BG,IAE/B,qBAAK1E,UAAWD,EAAQyE,UAAxB,SACGG,EAAUG,OAAS,EAAIF,EAAoB,4CCpBvCG,EAAUC,MAAMC,KAAK,8BCArBC,EAAS,CACpB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YCNIC,EAA0BJ,EAAQF,KAAI,SAACO,GAAD,MAAO,CACjDA,EACAvE,IAAUwE,QAAQC,OCIL9F,GDFDqB,IAAUD,MAAM2E,OAAOC,YAAYL,ICR/B1F,YAAgB,CAChCC,KAAM,CACJ6B,QAAS,OACTkE,oBAAqB,wCACrBC,QAAS,GACTC,UAAW,OACXvE,QAAS,MCqBEwE,EArBgB,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAC1B9F,EAAUP,IACVsG,EAAQC,mBACZ,kBACER,OAAOS,QAAQH,GAAqBhB,KAAI,mCAAEH,EAAF,KAAUuB,EAAV,YACtC,cAAC,EAAD,CAEEvB,OAAQA,EACRC,UAAWsB,GAFNvB,QAKX,CAACmB,IAGH,OAAO,oBAAI7F,UAAWD,EAAQL,KAAvB,SAA8BoG,KCZxBtG,EARGC,YAAgB,CAChCC,KAAM,GACNwG,MAAO,GACPC,QAAS,GACTC,QAAS,GACTlF,IAAK,K,wBCLMmF,EAAoB,SAACC,EAAGC,GAAJ,OAC/BD,EAAErF,SAASuF,cAAgBD,EAAEtF,SAASuF,cCHjB,GACI,GDcdC,EAAuB,SAAC9B,GACnC,IADiD,EAC3C+B,EAAkB,YAAI/B,GAAWgC,KAAKN,GACtCO,EAZwB,WAC9B,IADoC,EAC9BA,EAAa,GADiB,cAGpB7B,GAHoB,IAGpC,2BACE6B,EADuB,SACP,GAJkB,8BAOpC,OAAOA,EAKYC,GAF8B,cAI1BH,GAJ0B,IAIjD,2BAAwC,CAAC,IAA9B9D,EAA6B,QAGtCgE,EAFehE,EAAS3B,SAAS,GAAGuF,eAEjBM,KAAKlE,IAPuB,8BAUjD,OAAOgE,GAIHG,EAAW,YAAG,yDAAH,wBAEJC,EAAe,SAACC,GAAD,OAAiB/B,EAAO+B,EAAc,IAErDC,EAAmB,SAAChG,GAAD,uBAASA,EAAIiG,MAAMJ,UAAnB,aAAS,EAAwBK,QEtB3DC,EAAiC,SAAC,GAA0B,IAAxBnB,EAAuB,EAAvBA,MAAOvB,EAAgB,EAAhBA,UACzC5E,EAAUP,IACVsG,EAAQnB,EAAUE,KAAI,SAACjC,GAC3B,MAIIsE,EAAiBtE,EAAS1B,KAHvBoG,EADP,EACEC,IACOC,EAFT,EAEEtB,MACMuB,EAHR,EAGEC,KAGF,OACE,qBAAI1H,UAAWD,EAAQqG,QAAvB,UACE,uBAAMpG,UAAWD,EAAQ4H,KAAzB,UACG/E,EAAS5B,UADZ,IACwB4B,EAAS3B,YAFnC,YAKE,uBAAMjB,UAAWD,EAAQmB,IAAzB,UACG0G,OAAON,GADV,IACkBN,EAAaQ,GAD/B,KAC0CC,EAD1C,aALmC7E,EAAS9B,OAYlD,OACE,qBAAId,UAAWD,EAAQL,KAAvB,UACE,oBAAIM,UAAWD,EAAQmG,MAAvB,SAA+Bc,EAAad,KAE5C,oBAAIlG,UAAWD,EAAQoG,QAAvB,SAAiCL,MAHDI,IAavBjG,iBAAKoH,GCzCdQ,EAAqB3C,EAAOL,KAAI,SAACqB,GAAD,MAAW,CAC/CA,EACArF,IAAUwE,QAAQC,OAEdwC,EAAiBvC,OAAOC,YAAYqC,GCF3BrI,IDGDqB,IAAUD,MAAMkH,GCTZrI,YAAgB,CAChCC,KAAM,CACJkC,WAAY,QCyBDmG,GArBwB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBAClCjI,EAAUP,KACVsG,EAAQC,mBACZ,kBACER,OAAOS,QAAQgC,GAAkBnD,KAAI,mCAAEqB,EAAF,KAASvB,EAAT,YACnC,cAAC,EAAD,CAEEuB,MAAOA,EACPvB,UAAWA,GAFNuB,QAKX,CAAC8B,IAGH,OAAO,oBAAIhI,UAAWD,EAAQL,KAAvB,SAA8BoG,K,SCf1BmC,GAAoB,SAACC,GAAD,OAAWA,EAAMtF,SAAS+B,WAM9CwD,GAA8BC,aACzCH,IACA,SAACtD,GAAD,OAAe8B,EAAqB9B,MAGzB0D,GAA4BD,aACvCH,IAV0C,SAACC,GAAD,OAC1CA,EAAMtF,SAAS0F,wBAWf,SAAC3D,EAAW2D,GAAZ,OACE3D,EAAU4D,QAAO,SAAC3F,GAAD,OAAc0F,EAAqBE,SAAS5F,EAAS9B,UAG7D2H,GAAkCL,aAC7CC,IACA,SAACK,GAAD,ONQmC,SAAC/D,GACpC,IADkD,EAC5CgE,EAA6B,GADe,cAG3BhE,GAH2B,IAGlD,2BAAkC,CAAC,IAAxB/B,EAAuB,QAC1BsD,EAAQ0B,OAAOV,EAAiBtE,EAAS1B,KAAKgF,OAAS,EAEzDyC,EAA2BzC,GAC7ByC,EAA2BzC,GAAOY,KAAKlE,GAEvC+F,EAA2BzC,GAAS,CAACtD,IATS,8BAalD,OAAO+F,EMrBgBC,CAAsBF,MCTzClJ,GAAYC,YAAgB,CAChCC,KAAM,CACJ0B,QAAS,IAEXyH,aAAc,CACZlJ,MAAO,OAETmJ,gBAAiB,CACfnJ,MAAO,MACPoJ,WAAY,oBAsCDC,UAlCG,WAChB,IAAMjJ,EAAUP,KACVqD,EAAWC,cACX+C,EAAsBoD,YAAYd,IAClCe,EAA0BD,YAAYR,IAM5C,OAJAU,qBAAU,WACRtG,EAASuG,iBACR,CAACvG,IAGF,qBAAK7C,UAAWD,EAAQL,KAAxB,SACE,eAAC,EAAD,WACE,eAAC,EAAD,WACE,cAAC,EAAD,wBACA,cAAC,EAAD,oCAGF,eAAC,EAAD,WACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAwBmG,oBAAqBA,MAG/C,cAAC,EAAD,CAAwB7F,UAAWD,EAAQ+I,gBAA3C,SACE,cAAC,GAAD,CACEd,iBAAkBkB","file":"static/js/4.dd50fb4e.chunk.js","sourcesContent":["import { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  root: {\n    width: '100%',\n  },\n  employeeSection: {\n    width: '100%',\n  },\n});\n\nexport default useStyles;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useStyles from './styles';\n\nconst AlphabeticTable = ({ children }) => {\n  const classes = useStyles();\n\n  return <table className={classes.root}>{children}</table>;\n};\n\nAlphabeticTable.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default memo(AlphabeticTable);\n","import { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  root: {},\n  inner: {},\n});\n\nexport default useStyles;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useStyles from './styles';\n\nconst AlphabeticTableHead = ({ children }) => {\n  const classes = useStyles();\n\n  return (\n    <thead className={classes.root}>\n      <tr className={classes.inner}>{children}</tr>\n    </thead>\n  );\n};\n\nAlphabeticTableHead.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default memo(AlphabeticTableHead);\n","import { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  root: {\n    fontSize: 25,\n  },\n});\n\nexport default useStyles;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useStyles from './styles';\n\nconst AlphabeticTableHeading = ({ children }) => {\n  const classes = useStyles();\n\n  return <th className={classes.root}>{children}</th>;\n};\n\nAlphabeticTableHeading.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default memo(AlphabeticTableHeading);\n","import { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  root: {\n    textAlign: 'left',\n  },\n});\n\nexport default useStyles;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useStyles from './style';\n\nconst AlphabeticTableBody = ({ children }) => {\n  const classes = useStyles();\n\n  return (\n    <tbody className={classes.root}>\n      <tr>{children}</tr>\n    </tbody>\n  );\n};\n\nAlphabeticTableBody.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default memo(AlphabeticTableBody);\n","import { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  root: {\n    verticalAlign: 'top',\n  },\n});\n\nexport default useStyles;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n\nimport useStyles from './styles';\n\nconst AlphabeticTableSection = ({ className = '', children, ...props }) => {\n  const classes = useStyles();\n\n  return (\n    <td className={clsx(classes.root, className)} {...props}>\n      {children}\n    </td>\n  );\n};\n\nAlphabeticTableSection.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default memo(AlphabeticTableSection);\n","import PropTypes from 'prop-types';\n\nconst shape = PropTypes.shape({\n  id: PropTypes.string,\n  firstName: PropTypes.string,\n  lastName: PropTypes.string,\n  dob: PropTypes.string,\n});\n\nexport default shape;\n","import { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  root: {\n    border: 0,\n    padding: 0,\n    margin: 0,\n    minWidth: 0,\n    display: 'flex',\n    flexDirection: 'column',\n    '& + &': {\n      marginTop: 30,\n    },\n  },\n  legend: {\n    display: 'table',\n    float: 'left',\n    margin: 0,\n    padding: 0,\n    fontWeight: 600,\n    width: '100%',\n    '& + *': {\n      clear: 'both',\n    },\n  },\n  legendActive: {\n    color: '#00f',\n  },\n  label: {\n    width: '1em',\n    height: '1em',\n    display: 'inline-block',\n    cursor: 'pointer',\n    border: '1px solid',\n    borderRadius: '50%',\n  },\n  labelText: {\n    marginLeft: 5,\n  },\n  inputWrapper: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    marginTop: 10,\n    cursor: 'pointer',\n  },\n  input: {\n    display: 'none',\n    '&:checked + label': {\n      backgroundColor: '#000000',\n      boxShadow: 'inset 0 0 0 2px #ffffff',\n    },\n  },\n});\n\nexport default useStyles;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport clsx from 'clsx';\n\nimport { selectEmployee, unselectEmployee } from '../../redux/slices/employee';\n\nimport employeeShape from '../../shapes/employee';\n\nimport useStyles from './styles';\n\nconst SPACE_KEY_CODE = 32;\n\nconst AlphabeticEmployeeSwitcher = ({ employee }) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [isActive, setIsActive] = useState(false);\n\n  const activate = () => {\n    dispatch(selectEmployee({ id: employee.id }));\n  };\n\n  const deactivate = () => {\n    dispatch(unselectEmployee({ id: employee.id }));\n  };\n\n  const handleActivateClick = () => {\n    activate();\n    setIsActive(true);\n  };\n\n  const handleDeactivateClick = () => {\n    deactivate();\n    setIsActive(false);\n  };\n\n  const handleKeyDown = (event, cb) => {\n    if (event.keyCode === SPACE_KEY_CODE) {\n      event.preventDefault();\n      cb();\n      setIsActive((prev) => !prev);\n    }\n  };\n\n  const handleActivateKeyDown = (event) => {\n    handleKeyDown(event, activate);\n  };\n\n  const handleDeactivateKeyDown = (event) => {\n    handleKeyDown(event, deactivate);\n  };\n\n  return (\n    <fieldset className={classes.root}>\n      <legend\n        className={clsx(classes.legend, { [classes.legendActive]: isActive })}\n      >\n        {employee.firstName} {employee.lastName}\n      </legend>\n\n      <div className={classes.inputWrapper}>\n        <input\n          type=\"radio\"\n          checked={isActive}\n          className={classes.input}\n          onChange={handleActivateClick}\n          id={`${employee.id}-activate`}\n        />\n\n        <label\n          tabIndex=\"0\"\n          role=\"radio\"\n          aria-checked={isActive}\n          className={classes.label}\n          onKeyDown={handleActivateKeyDown}\n          htmlFor={`${employee.id}-activate`}\n        />\n\n        <span className={classes.labelText} onClick={handleActivateClick}>\n          active\n        </span>\n      </div>\n\n      <div className={classes.inputWrapper}>\n        <input\n          type=\"radio\"\n          checked={!isActive}\n          className={classes.input}\n          id={`${employee.id}-deactivate`}\n          onChange={handleDeactivateClick}\n        />\n\n        <label\n          tabIndex=\"0\"\n          role=\"radio\"\n          aria-checked={!isActive}\n          className={classes.label}\n          onKeyDown={handleDeactivateKeyDown}\n          htmlFor={`${employee.id}-deactivate`}\n        />\n\n        <span className={classes.labelText} onClick={handleDeactivateClick}>\n          not active\n        </span>\n      </div>\n    </fieldset>\n  );\n};\n\nAlphabeticEmployeeSwitcher.propTypes = {\n  employee: employeeShape,\n};\n\nexport default AlphabeticEmployeeSwitcher;\n","import { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  root: {},\n  title: {\n    padding: '0 10px',\n    fontSize: 25,\n    margin: '10px 0',\n  },\n  switchers: {},\n});\n\nexport default useStyles;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AlphabeticEmployeeSwitcher from '../AlphabeticEmployeeSwitcher';\n\nimport employeeShape from '../../shapes/employee';\n\nimport useStyles from './styles';\n\nconst AlphabeticEmployeeItem = ({ letter, employees = [] }) => {\n  const classes = useStyles();\n  const employeeSwitchers = employees.map((employee) => (\n    <AlphabeticEmployeeSwitcher key={employee.id} employee={employee} />\n  ));\n\n  return (\n    <li className={classes.root}>\n      <h5 className={classes.title}>{letter}</h5>\n\n      <div className={classes.switchers}>\n        {employees.length > 0 ? employeeSwitchers : <b>-----</b>}\n      </div>\n    </li>\n  );\n};\n\nAlphabeticEmployeeItem.propTypes = {\n  letter: PropTypes.string.isRequired,\n  employees: PropTypes.arrayOf(employeeShape),\n};\n\nexport default AlphabeticEmployeeItem;\n","export const LETTERS = Array.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\n","export const MONTHS = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n","import PropTypes from 'prop-types';\n\nimport employeeShape from './employee';\n\nimport { LETTERS } from '../constants';\n\nconst lettersEmployeesEntries = LETTERS.map((l) => [\n  l,\n  PropTypes.arrayOf(employeeShape),\n]);\nconst shape = PropTypes.shape(Object.fromEntries(lettersEmployeesEntries));\n\nexport default shape;\n","import { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  root: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\n    gridGap: 20,\n    listStyle: 'none',\n    padding: 0,\n  },\n});\n\nexport default useStyles;\n","import React, { useMemo } from 'react';\n\nimport AlphabeticEmployeeItem from '../AlphabeticEmployeeItem';\n\nimport alphabeticEmployeesShape from '../../shapes/alphabeticEmployees';\n\nimport useStyles from './styles';\n\nconst AlphabeticEmployeeList = ({ alphabeticEmployees }) => {\n  const classes = useStyles();\n  const items = useMemo(\n    () =>\n      Object.entries(alphabeticEmployees).map(([letter, lEmployees]) => (\n        <AlphabeticEmployeeItem\n          key={letter}\n          letter={letter}\n          employees={lEmployees}\n        />\n      )),\n    [alphabeticEmployees]\n  );\n\n  return <ul className={classes.root}>{items}</ul>;\n};\n\nAlphabeticEmployeeList.propTypes = {\n  alphabeticEmployees: alphabeticEmployeesShape,\n};\n\nexport default AlphabeticEmployeeList;\n","import { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  root: {},\n  month: {},\n  dobList: {},\n  dobItem: {},\n  dob: {},\n});\n\nexport default useStyles;\n","import { DO_SWAP, DO_NOT_SWAP, MONTHS, LETTERS } from '../constants';\n\nexport const lastNamePredicate = (a, b) =>\n  a.lastName.toUpperCase() > b.lastName.toUpperCase() ? DO_SWAP : DO_NOT_SWAP;\n\nexport const createLettersMap = () => {\n  const lettersMap = {};\n\n  for (const l of LETTERS) {\n    lettersMap[l] = [];\n  }\n\n  return lettersMap;\n};\n\nexport const getEmployeesAlphaMap = (employees) => {\n  const sortedEmployees = [...employees].sort(lastNamePredicate);\n  const lettersMap = createLettersMap();\n\n  for (const employee of sortedEmployees) {\n    const letter = employee.lastName[0].toUpperCase();\n\n    lettersMap[letter].push(employee);\n  }\n\n  return lettersMap;\n};\n\n// Date of birth\nconst datePattern = /(?<year>\\d\\d\\d\\d)-(?<month>\\d\\d)-(?<day>\\d\\d)/;\n\nexport const getMonthName = (monthNumber) => MONTHS[monthNumber - 1];\n\nexport const parseDateOfBirth = (dob) => dob.match(datePattern)?.groups;\n\nexport const getEmployeesMonthsMap = (employees) => {\n  const monthEmployeesBirthdaysMap = {};\n\n  for (const employee of employees) {\n    const month = Number(parseDateOfBirth(employee.dob).month) - 1;\n\n    if (monthEmployeesBirthdaysMap[month]) {\n      monthEmployeesBirthdaysMap[month].push(employee);\n    } else {\n      monthEmployeesBirthdaysMap[month] = [employee];\n    }\n  }\n\n  return monthEmployeesBirthdaysMap;\n};\n","export const DO_SWAP = 1;\nexport const DO_NOT_SWAP = -1;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useStyles from './styles';\n\nimport { MONTHS } from '../../constants';\n\nimport { parseDateOfBirth, getMonthName } from '../../helpers/employee';\n\nimport employeeShape from '../../shapes/employee';\n\nconst AlphabeticEmployeeBirthdayItem = ({ month, employees }) => {\n  const classes = useStyles();\n  const items = employees.map((employee) => {\n    const {\n      day: bDay,\n      month: bMonth,\n      year: bYear,\n    } = parseDateOfBirth(employee.dob);\n\n    return (\n      <li className={classes.dobItem} key={employee.id}>\n        <span className={classes.name}>\n          {employee.firstName} {employee.lastName}\n        </span>\n        &nbsp;-&nbsp;\n        <span className={classes.dob}>\n          {Number(bDay)} {getMonthName(bMonth)}, {bYear} year\n        </span>\n      </li>\n    );\n  });\n\n  return (\n    <li className={classes.root} key={month}>\n      <h3 className={classes.month}>{getMonthName(month)}</h3>\n\n      <ul className={classes.dobList}>{items}</ul>\n    </li>\n  );\n};\n\nAlphabeticEmployeeBirthdayItem.propTypes = {\n  month: PropTypes.oneOf(Object.keys(MONTHS)),\n  employees: PropTypes.arrayOf(employeeShape),\n};\n\nexport default memo(AlphabeticEmployeeBirthdayItem);\n","import PropTypes from 'prop-types';\n\nimport employeeShape from './employee';\n\nimport { MONTHS } from '../constants';\n\nconst monthsShapeEntries = MONTHS.map((month) => [\n  month,\n  PropTypes.arrayOf(employeeShape),\n]);\nconst monthsShapeMap = Object.fromEntries(monthsShapeEntries);\nconst shape = PropTypes.shape(monthsShapeMap);\n\nexport default shape;\n","import { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  root: {\n    fontWeight: 600,\n  },\n});\n\nexport default useStyles;\n","import React, { useMemo } from 'react';\n\nimport AlphabeticEmployeeBirthdayItem from '../AlphabeticEmployeeBirthdayItem';\n\nimport employeesByMonthShape from '../../shapes/employeesByMonth';\n\nimport useStyles from './styles';\n\nconst AlphabeticEmployeeBirthdayList = ({ employeesByMonth }) => {\n  const classes = useStyles();\n  const items = useMemo(\n    () =>\n      Object.entries(employeesByMonth).map(([month, employees]) => (\n        <AlphabeticEmployeeBirthdayItem\n          key={month}\n          month={month}\n          employees={employees}\n        />\n      )),\n    [employeesByMonth]\n  );\n\n  return <ul className={classes.root}>{items}</ul>;\n};\n\nAlphabeticEmployeeBirthdayList.propTypes = {\n  employeesByMonth: employeesByMonthShape,\n};\n\nexport default AlphabeticEmployeeBirthdayList;\n","import { createSelector } from '@reduxjs/toolkit';\nimport {\n  getEmployeesAlphaMap,\n  getEmployeesMonthsMap,\n} from '../../helpers/employee';\n\n// Selectors\nexport const employeesSelector = (state) => state.employee.employees;\n\nexport const selectedEmployeesIdsSelector = (state) =>\n  state.employee.selectedEmployeesIds;\n\n// Reselectors\nexport const alphabeticEmployeesSelector = createSelector(\n  employeesSelector,\n  (employees) => getEmployeesAlphaMap(employees)\n);\n\nexport const selectedEmployeesSelector = createSelector(\n  employeesSelector,\n  selectedEmployeesIdsSelector,\n  (employees, selectedEmployeesIds) =>\n    employees.filter((employee) => selectedEmployeesIds.includes(employee.id))\n);\n\nexport const groupedByMonthEmployeesSelector = createSelector(\n  selectedEmployeesSelector,\n  (selectedEmployees) => getEmployeesMonthsMap(selectedEmployees)\n);\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createUseStyles } from 'react-jss';\n\nimport AlphabeticTable from '../components/AlphabeticTable';\nimport AlphabeticTableHead from '../components/AlphabeticTableHead';\nimport AlphabeticTableHeading from '../components/AlphabeticTableHeading';\nimport AlphabeticTableBody from '../components/AlphabeticTableBody';\nimport AlphabeticTableSection from '../components/AlphabeticTableSection';\nimport AplhabeticEmployeeList from '../components/AlphabeticEmployeeList';\nimport AlphabeticEmployeeBirthdayList from '../components/AlphabeticEmployeeBirthdayList';\n\nimport { fetchEmployees } from '../redux/slices/employee';\nimport {\n  alphabeticEmployeesSelector,\n  groupedByMonthEmployeesSelector,\n} from '../redux/selectors/employee';\n\nconst useStyles = createUseStyles({\n  root: {\n    padding: 30,\n  },\n  alphaSection: {\n    width: '75%',\n  },\n  birthdaySection: {\n    width: '25%',\n    borderLeft: '2px solid #666',\n  },\n});\n\nconst Employees = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const alphabeticEmployees = useSelector(alphabeticEmployeesSelector);\n  const groupedByMonthEmployees = useSelector(groupedByMonthEmployeesSelector);\n\n  useEffect(() => {\n    dispatch(fetchEmployees());\n  }, [dispatch]);\n\n  return (\n    <div className={classes.root}>\n      <AlphabeticTable>\n        <AlphabeticTableHead>\n          <AlphabeticTableHeading>Employees</AlphabeticTableHeading>\n          <AlphabeticTableHeading>Employees birthday</AlphabeticTableHeading>\n        </AlphabeticTableHead>\n\n        <AlphabeticTableBody>\n          <AlphabeticTableSection>\n            <AplhabeticEmployeeList alphabeticEmployees={alphabeticEmployees} />\n          </AlphabeticTableSection>\n\n          <AlphabeticTableSection className={classes.birthdaySection}>\n            <AlphabeticEmployeeBirthdayList\n              employeesByMonth={groupedByMonthEmployees}\n            />\n          </AlphabeticTableSection>\n        </AlphabeticTableBody>\n      </AlphabeticTable>\n    </div>\n  );\n};\n\nexport default Employees;\n"],"sourceRoot":""}